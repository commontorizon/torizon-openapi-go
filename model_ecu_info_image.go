/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EcuInfoImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcuInfoImage{}

// EcuInfoImage struct for EcuInfoImage
type EcuInfoImage struct {
	Filepath string `json:"filepath"`
	Size int64 `json:"size"`
	Hash string `json:"hash"`
}

type _EcuInfoImage EcuInfoImage

// NewEcuInfoImage instantiates a new EcuInfoImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcuInfoImage(filepath string, size int64, hash string) *EcuInfoImage {
	this := EcuInfoImage{}
	this.Filepath = filepath
	this.Size = size
	this.Hash = hash
	return &this
}

// NewEcuInfoImageWithDefaults instantiates a new EcuInfoImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcuInfoImageWithDefaults() *EcuInfoImage {
	this := EcuInfoImage{}
	return &this
}

// GetFilepath returns the Filepath field value
func (o *EcuInfoImage) GetFilepath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filepath
}

// GetFilepathOk returns a tuple with the Filepath field value
// and a boolean to check if the value has been set.
func (o *EcuInfoImage) GetFilepathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filepath, true
}

// SetFilepath sets field value
func (o *EcuInfoImage) SetFilepath(v string) {
	o.Filepath = v
}

// GetSize returns the Size field value
func (o *EcuInfoImage) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *EcuInfoImage) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *EcuInfoImage) SetSize(v int64) {
	o.Size = v
}

// GetHash returns the Hash field value
func (o *EcuInfoImage) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *EcuInfoImage) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *EcuInfoImage) SetHash(v string) {
	o.Hash = v
}

func (o EcuInfoImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcuInfoImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filepath"] = o.Filepath
	toSerialize["size"] = o.Size
	toSerialize["hash"] = o.Hash
	return toSerialize, nil
}

func (o *EcuInfoImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filepath",
		"size",
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEcuInfoImage := _EcuInfoImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEcuInfoImage)

	if err != nil {
		return err
	}

	*o = EcuInfoImage(varEcuInfoImage)

	return err
}

type NullableEcuInfoImage struct {
	value *EcuInfoImage
	isSet bool
}

func (v NullableEcuInfoImage) Get() *EcuInfoImage {
	return v.value
}

func (v *NullableEcuInfoImage) Set(val *EcuInfoImage) {
	v.value = val
	v.isSet = true
}

func (v NullableEcuInfoImage) IsSet() bool {
	return v.isSet
}

func (v *NullableEcuInfoImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcuInfoImage(val *EcuInfoImage) *NullableEcuInfoImage {
	return &NullableEcuInfoImage{value: val, isSet: true}
}

func (v NullableEcuInfoImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcuInfoImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


