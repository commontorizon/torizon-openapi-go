/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorRepresentation{}

// ErrorRepresentation struct for ErrorRepresentation
type ErrorRepresentation struct {
	Code string `json:"code"`
	Description string `json:"description"`
	Cause NullableString `json:"cause,omitempty"`
	ErrorId NullableString `json:"errorId,omitempty"`
}

type _ErrorRepresentation ErrorRepresentation

// NewErrorRepresentation instantiates a new ErrorRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorRepresentation(code string, description string) *ErrorRepresentation {
	this := ErrorRepresentation{}
	this.Code = code
	this.Description = description
	return &this
}

// NewErrorRepresentationWithDefaults instantiates a new ErrorRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorRepresentationWithDefaults() *ErrorRepresentation {
	this := ErrorRepresentation{}
	return &this
}

// GetCode returns the Code field value
func (o *ErrorRepresentation) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorRepresentation) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorRepresentation) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value
func (o *ErrorRepresentation) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ErrorRepresentation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ErrorRepresentation) SetDescription(v string) {
	o.Description = v
}

// GetCause returns the Cause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorRepresentation) GetCause() string {
	if o == nil || IsNil(o.Cause.Get()) {
		var ret string
		return ret
	}
	return *o.Cause.Get()
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorRepresentation) GetCauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cause.Get(), o.Cause.IsSet()
}

// HasCause returns a boolean if a field has been set.
func (o *ErrorRepresentation) HasCause() bool {
	if o != nil && o.Cause.IsSet() {
		return true
	}

	return false
}

// SetCause gets a reference to the given NullableString and assigns it to the Cause field.
func (o *ErrorRepresentation) SetCause(v string) {
	o.Cause.Set(&v)
}
// SetCauseNil sets the value for Cause to be an explicit nil
func (o *ErrorRepresentation) SetCauseNil() {
	o.Cause.Set(nil)
}

// UnsetCause ensures that no value is present for Cause, not even an explicit nil
func (o *ErrorRepresentation) UnsetCause() {
	o.Cause.Unset()
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorRepresentation) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorId.Get()
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorRepresentation) GetErrorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorId.Get(), o.ErrorId.IsSet()
}

// HasErrorId returns a boolean if a field has been set.
func (o *ErrorRepresentation) HasErrorId() bool {
	if o != nil && o.ErrorId.IsSet() {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given NullableString and assigns it to the ErrorId field.
func (o *ErrorRepresentation) SetErrorId(v string) {
	o.ErrorId.Set(&v)
}
// SetErrorIdNil sets the value for ErrorId to be an explicit nil
func (o *ErrorRepresentation) SetErrorIdNil() {
	o.ErrorId.Set(nil)
}

// UnsetErrorId ensures that no value is present for ErrorId, not even an explicit nil
func (o *ErrorRepresentation) UnsetErrorId() {
	o.ErrorId.Unset()
}

func (o ErrorRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["description"] = o.Description
	if o.Cause.IsSet() {
		toSerialize["cause"] = o.Cause.Get()
	}
	if o.ErrorId.IsSet() {
		toSerialize["errorId"] = o.ErrorId.Get()
	}
	return toSerialize, nil
}

func (o *ErrorRepresentation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorRepresentation := _ErrorRepresentation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorRepresentation)

	if err != nil {
		return err
	}

	*o = ErrorRepresentation(varErrorRepresentation)

	return err
}

type NullableErrorRepresentation struct {
	value *ErrorRepresentation
	isSet bool
}

func (v NullableErrorRepresentation) Get() *ErrorRepresentation {
	return v.value
}

func (v *NullableErrorRepresentation) Set(val *ErrorRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorRepresentation(val *ErrorRepresentation) *NullableErrorRepresentation {
	return &NullableErrorRepresentation{value: val, isSet: true}
}

func (v NullableErrorRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


