/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EcuInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcuInfoResponse{}

// EcuInfoResponse struct for EcuInfoResponse
type EcuInfoResponse struct {
	Id string `json:"id"`
	HardwareId string `json:"hardwareId"`
	Primary bool `json:"primary"`
	Image EcuInfoImage `json:"image"`
}

type _EcuInfoResponse EcuInfoResponse

// NewEcuInfoResponse instantiates a new EcuInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcuInfoResponse(id string, hardwareId string, primary bool, image EcuInfoImage) *EcuInfoResponse {
	this := EcuInfoResponse{}
	this.Id = id
	this.HardwareId = hardwareId
	this.Primary = primary
	this.Image = image
	return &this
}

// NewEcuInfoResponseWithDefaults instantiates a new EcuInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcuInfoResponseWithDefaults() *EcuInfoResponse {
	this := EcuInfoResponse{}
	return &this
}

// GetId returns the Id field value
func (o *EcuInfoResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EcuInfoResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EcuInfoResponse) SetId(v string) {
	o.Id = v
}

// GetHardwareId returns the HardwareId field value
func (o *EcuInfoResponse) GetHardwareId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HardwareId
}

// GetHardwareIdOk returns a tuple with the HardwareId field value
// and a boolean to check if the value has been set.
func (o *EcuInfoResponse) GetHardwareIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardwareId, true
}

// SetHardwareId sets field value
func (o *EcuInfoResponse) SetHardwareId(v string) {
	o.HardwareId = v
}

// GetPrimary returns the Primary field value
func (o *EcuInfoResponse) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *EcuInfoResponse) GetPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *EcuInfoResponse) SetPrimary(v bool) {
	o.Primary = v
}

// GetImage returns the Image field value
func (o *EcuInfoResponse) GetImage() EcuInfoImage {
	if o == nil {
		var ret EcuInfoImage
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *EcuInfoResponse) GetImageOk() (*EcuInfoImage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *EcuInfoResponse) SetImage(v EcuInfoImage) {
	o.Image = v
}

func (o EcuInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcuInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["hardwareId"] = o.HardwareId
	toSerialize["primary"] = o.Primary
	toSerialize["image"] = o.Image
	return toSerialize, nil
}

func (o *EcuInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"hardwareId",
		"primary",
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEcuInfoResponse := _EcuInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEcuInfoResponse)

	if err != nil {
		return err
	}

	*o = EcuInfoResponse(varEcuInfoResponse)

	return err
}

type NullableEcuInfoResponse struct {
	value *EcuInfoResponse
	isSet bool
}

func (v NullableEcuInfoResponse) Get() *EcuInfoResponse {
	return v.value
}

func (v *NullableEcuInfoResponse) Set(val *EcuInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEcuInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEcuInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcuInfoResponse(val *EcuInfoResponse) *NullableEcuInfoResponse {
	return &NullableEcuInfoResponse{value: val, isSet: true}
}

func (v NullableEcuInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcuInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


