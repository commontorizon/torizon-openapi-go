/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tuple2LongOptionDouble type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tuple2LongOptionDouble{}

// Tuple2LongOptionDouble struct for Tuple2LongOptionDouble
type Tuple2LongOptionDouble struct {
	Var1 int64 `json:"_1"`
	Var2 *float64 `json:"_2,omitempty"`
}

type _Tuple2LongOptionDouble Tuple2LongOptionDouble

// NewTuple2LongOptionDouble instantiates a new Tuple2LongOptionDouble object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTuple2LongOptionDouble(var1 int64) *Tuple2LongOptionDouble {
	this := Tuple2LongOptionDouble{}
	this.Var1 = var1
	return &this
}

// NewTuple2LongOptionDoubleWithDefaults instantiates a new Tuple2LongOptionDouble object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTuple2LongOptionDoubleWithDefaults() *Tuple2LongOptionDouble {
	this := Tuple2LongOptionDouble{}
	return &this
}

// GetVar1 returns the Var1 field value
func (o *Tuple2LongOptionDouble) GetVar1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value
// and a boolean to check if the value has been set.
func (o *Tuple2LongOptionDouble) GetVar1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var1, true
}

// SetVar1 sets field value
func (o *Tuple2LongOptionDouble) SetVar1(v int64) {
	o.Var1 = v
}

// GetVar2 returns the Var2 field value if set, zero value otherwise.
func (o *Tuple2LongOptionDouble) GetVar2() float64 {
	if o == nil || IsNil(o.Var2) {
		var ret float64
		return ret
	}
	return *o.Var2
}

// GetVar2Ok returns a tuple with the Var2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tuple2LongOptionDouble) GetVar2Ok() (*float64, bool) {
	if o == nil || IsNil(o.Var2) {
		return nil, false
	}
	return o.Var2, true
}

// HasVar2 returns a boolean if a field has been set.
func (o *Tuple2LongOptionDouble) HasVar2() bool {
	if o != nil && !IsNil(o.Var2) {
		return true
	}

	return false
}

// SetVar2 gets a reference to the given float64 and assigns it to the Var2 field.
func (o *Tuple2LongOptionDouble) SetVar2(v float64) {
	o.Var2 = &v
}

func (o Tuple2LongOptionDouble) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tuple2LongOptionDouble) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_1"] = o.Var1
	if !IsNil(o.Var2) {
		toSerialize["_2"] = o.Var2
	}
	return toSerialize, nil
}

func (o *Tuple2LongOptionDouble) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_1",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTuple2LongOptionDouble := _Tuple2LongOptionDouble{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTuple2LongOptionDouble)

	if err != nil {
		return err
	}

	*o = Tuple2LongOptionDouble(varTuple2LongOptionDouble)

	return err
}

type NullableTuple2LongOptionDouble struct {
	value *Tuple2LongOptionDouble
	isSet bool
}

func (v NullableTuple2LongOptionDouble) Get() *Tuple2LongOptionDouble {
	return v.value
}

func (v *NullableTuple2LongOptionDouble) Set(val *Tuple2LongOptionDouble) {
	v.value = val
	v.isSet = true
}

func (v NullableTuple2LongOptionDouble) IsSet() bool {
	return v.isSet
}

func (v *NullableTuple2LongOptionDouble) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTuple2LongOptionDouble(val *Tuple2LongOptionDouble) *NullableTuple2LongOptionDouble {
	return &NullableTuple2LongOptionDouble{value: val, isSet: true}
}

func (v NullableTuple2LongOptionDouble) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTuple2LongOptionDouble) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


