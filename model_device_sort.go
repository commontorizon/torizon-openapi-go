/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeviceSort the model 'DeviceSort'
type DeviceSort string

// List of DeviceSort
const (
	NAME DeviceSort = "Name"
	DEVICE_ID DeviceSort = "DeviceId"
	UUID DeviceSort = "Uuid"
	CREATED_AT DeviceSort = "CreatedAt"
	ACTIVATED_AT DeviceSort = "ActivatedAt"
	LAST_SEEN DeviceSort = "LastSeen"
)

// All allowed values of DeviceSort enum
var AllowedDeviceSortEnumValues = []DeviceSort{
	"Name",
	"DeviceId",
	"Uuid",
	"CreatedAt",
	"ActivatedAt",
	"LastSeen",
}

func (v *DeviceSort) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceSort(value)
	for _, existing := range AllowedDeviceSortEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceSort", value)
}

// NewDeviceSortFromValue returns a pointer to a valid DeviceSort
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceSortFromValue(v string) (*DeviceSort, error) {
	ev := DeviceSort(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceSort: valid values are %v", v, AllowedDeviceSortEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceSort) IsValid() bool {
	for _, existing := range AllowedDeviceSortEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceSort value
func (v DeviceSort) Ptr() *DeviceSort {
	return &v
}

type NullableDeviceSort struct {
	value *DeviceSort
	isSet bool
}

func (v NullableDeviceSort) Get() *DeviceSort {
	return v.value
}

func (v *NullableDeviceSort) Set(val *DeviceSort) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSort) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSort(val *DeviceSort) *NullableDeviceSort {
	return &NullableDeviceSort{value: val, isSet: true}
}

func (v NullableDeviceSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

