/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DevicePackages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicePackages{}

// DevicePackages struct for DevicePackages
type DevicePackages struct {
	DeviceUuid string `json:"deviceUuid"`
	InstalledPackages []InstalledPackage `json:"installedPackages,omitempty"`
}

type _DevicePackages DevicePackages

// NewDevicePackages instantiates a new DevicePackages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicePackages(deviceUuid string) *DevicePackages {
	this := DevicePackages{}
	this.DeviceUuid = deviceUuid
	return &this
}

// NewDevicePackagesWithDefaults instantiates a new DevicePackages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicePackagesWithDefaults() *DevicePackages {
	this := DevicePackages{}
	return &this
}

// GetDeviceUuid returns the DeviceUuid field value
func (o *DevicePackages) GetDeviceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value
// and a boolean to check if the value has been set.
func (o *DevicePackages) GetDeviceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUuid, true
}

// SetDeviceUuid sets field value
func (o *DevicePackages) SetDeviceUuid(v string) {
	o.DeviceUuid = v
}

// GetInstalledPackages returns the InstalledPackages field value if set, zero value otherwise.
func (o *DevicePackages) GetInstalledPackages() []InstalledPackage {
	if o == nil || IsNil(o.InstalledPackages) {
		var ret []InstalledPackage
		return ret
	}
	return o.InstalledPackages
}

// GetInstalledPackagesOk returns a tuple with the InstalledPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePackages) GetInstalledPackagesOk() ([]InstalledPackage, bool) {
	if o == nil || IsNil(o.InstalledPackages) {
		return nil, false
	}
	return o.InstalledPackages, true
}

// HasInstalledPackages returns a boolean if a field has been set.
func (o *DevicePackages) HasInstalledPackages() bool {
	if o != nil && !IsNil(o.InstalledPackages) {
		return true
	}

	return false
}

// SetInstalledPackages gets a reference to the given []InstalledPackage and assigns it to the InstalledPackages field.
func (o *DevicePackages) SetInstalledPackages(v []InstalledPackage) {
	o.InstalledPackages = v
}

func (o DevicePackages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicePackages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceUuid"] = o.DeviceUuid
	if !IsNil(o.InstalledPackages) {
		toSerialize["installedPackages"] = o.InstalledPackages
	}
	return toSerialize, nil
}

func (o *DevicePackages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevicePackages := _DevicePackages{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevicePackages)

	if err != nil {
		return err
	}

	*o = DevicePackages(varDevicePackages)

	return err
}

type NullableDevicePackages struct {
	value *DevicePackages
	isSet bool
}

func (v NullableDevicePackages) Get() *DevicePackages {
	return v.value
}

func (v *NullableDevicePackages) Set(val *DevicePackages) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePackages) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePackages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePackages(val *DevicePackages) *NullableDevicePackages {
	return &NullableDevicePackages{value: val, isSet: true}
}

func (v NullableDevicePackages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePackages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


