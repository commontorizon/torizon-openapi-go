/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstalledPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstalledPackage{}

// InstalledPackage struct for InstalledPackage
type InstalledPackage struct {
	Component string `json:"component"`
	Installed PackageInfo `json:"installed"`
}

type _InstalledPackage InstalledPackage

// NewInstalledPackage instantiates a new InstalledPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstalledPackage(component string, installed PackageInfo) *InstalledPackage {
	this := InstalledPackage{}
	this.Component = component
	this.Installed = installed
	return &this
}

// NewInstalledPackageWithDefaults instantiates a new InstalledPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstalledPackageWithDefaults() *InstalledPackage {
	this := InstalledPackage{}
	return &this
}

// GetComponent returns the Component field value
func (o *InstalledPackage) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *InstalledPackage) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *InstalledPackage) SetComponent(v string) {
	o.Component = v
}

// GetInstalled returns the Installed field value
func (o *InstalledPackage) GetInstalled() PackageInfo {
	if o == nil {
		var ret PackageInfo
		return ret
	}

	return o.Installed
}

// GetInstalledOk returns a tuple with the Installed field value
// and a boolean to check if the value has been set.
func (o *InstalledPackage) GetInstalledOk() (*PackageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Installed, true
}

// SetInstalled sets field value
func (o *InstalledPackage) SetInstalled(v PackageInfo) {
	o.Installed = v
}

func (o InstalledPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstalledPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	toSerialize["installed"] = o.Installed
	return toSerialize, nil
}

func (o *InstalledPackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component",
		"installed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstalledPackage := _InstalledPackage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstalledPackage)

	if err != nil {
		return err
	}

	*o = InstalledPackage(varInstalledPackage)

	return err
}

type NullableInstalledPackage struct {
	value *InstalledPackage
	isSet bool
}

func (v NullableInstalledPackage) Get() *InstalledPackage {
	return v.value
}

func (v *NullableInstalledPackage) Set(val *InstalledPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableInstalledPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableInstalledPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstalledPackage(val *InstalledPackage) *NullableInstalledPackage {
	return &NullableInstalledPackage{value: val, isSet: true}
}

func (v NullableInstalledPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstalledPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


