/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeAggregationMethod - struct for TimeAggregationMethod
type TimeAggregationMethod struct {
	MapmapOfStringAny *map[string]interface{}
}

// map[string]interface{}AsTimeAggregationMethod is a convenience function that returns map[string]interface{} wrapped in TimeAggregationMethod
func MapmapOfStringAnyAsTimeAggregationMethod(v *map[string]interface{}) TimeAggregationMethod {
	return TimeAggregationMethod{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TimeAggregationMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TimeAggregationMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TimeAggregationMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TimeAggregationMethod) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TimeAggregationMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableTimeAggregationMethod struct {
	value *TimeAggregationMethod
	isSet bool
}

func (v NullableTimeAggregationMethod) Get() *TimeAggregationMethod {
	return v.value
}

func (v *NullableTimeAggregationMethod) Set(val *TimeAggregationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeAggregationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeAggregationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeAggregationMethod(val *TimeAggregationMethod) *NullableTimeAggregationMethod {
	return &NullableTimeAggregationMethod{value: val, isSet: true}
}

func (v NullableTimeAggregationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeAggregationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


