/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FleetType the model 'FleetType'
type FleetType string

// List of FleetType
const (
	STATIC FleetType = "static"
	DYNAMIC FleetType = "dynamic"
)

// All allowed values of FleetType enum
var AllowedFleetTypeEnumValues = []FleetType{
	"static",
	"dynamic",
}

func (v *FleetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FleetType(value)
	for _, existing := range AllowedFleetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FleetType", value)
}

// NewFleetTypeFromValue returns a pointer to a valid FleetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFleetTypeFromValue(v string) (*FleetType, error) {
	ev := FleetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FleetType: valid values are %v", v, AllowedFleetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FleetType) IsValid() bool {
	for _, existing := range AllowedFleetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FleetType value
func (v FleetType) Ptr() *FleetType {
	return &v
}

type NullableFleetType struct {
	value *FleetType
	isSet bool
}

func (v NullableFleetType) Get() *FleetType {
	return v.value
}

func (v *NullableFleetType) Set(val *FleetType) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetType) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetType(val *FleetType) *NullableFleetType {
	return &NullableFleetType{value: val, isSet: true}
}

func (v NullableFleetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

