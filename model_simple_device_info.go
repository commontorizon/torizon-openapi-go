/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SimpleDeviceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleDeviceInfo{}

// SimpleDeviceInfo struct for SimpleDeviceInfo
type SimpleDeviceInfo struct {
	DeviceUuid string `json:"deviceUuid"`
	DeviceId string `json:"deviceId"`
	Name string `json:"name"`
}

type _SimpleDeviceInfo SimpleDeviceInfo

// NewSimpleDeviceInfo instantiates a new SimpleDeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleDeviceInfo(deviceUuid string, deviceId string, name string) *SimpleDeviceInfo {
	this := SimpleDeviceInfo{}
	this.DeviceUuid = deviceUuid
	this.DeviceId = deviceId
	this.Name = name
	return &this
}

// NewSimpleDeviceInfoWithDefaults instantiates a new SimpleDeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleDeviceInfoWithDefaults() *SimpleDeviceInfo {
	this := SimpleDeviceInfo{}
	return &this
}

// GetDeviceUuid returns the DeviceUuid field value
func (o *SimpleDeviceInfo) GetDeviceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value
// and a boolean to check if the value has been set.
func (o *SimpleDeviceInfo) GetDeviceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUuid, true
}

// SetDeviceUuid sets field value
func (o *SimpleDeviceInfo) SetDeviceUuid(v string) {
	o.DeviceUuid = v
}

// GetDeviceId returns the DeviceId field value
func (o *SimpleDeviceInfo) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *SimpleDeviceInfo) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *SimpleDeviceInfo) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetName returns the Name field value
func (o *SimpleDeviceInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SimpleDeviceInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SimpleDeviceInfo) SetName(v string) {
	o.Name = v
}

func (o SimpleDeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleDeviceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceUuid"] = o.DeviceUuid
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *SimpleDeviceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceUuid",
		"deviceId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSimpleDeviceInfo := _SimpleDeviceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSimpleDeviceInfo)

	if err != nil {
		return err
	}

	*o = SimpleDeviceInfo(varSimpleDeviceInfo)

	return err
}

type NullableSimpleDeviceInfo struct {
	value *SimpleDeviceInfo
	isSet bool
}

func (v NullableSimpleDeviceInfo) Get() *SimpleDeviceInfo {
	return v.value
}

func (v *NullableSimpleDeviceInfo) Set(val *SimpleDeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleDeviceInfo(val *SimpleDeviceInfo) *NullableSimpleDeviceInfo {
	return &NullableSimpleDeviceInfo{value: val, isSet: true}
}

func (v NullableSimpleDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


