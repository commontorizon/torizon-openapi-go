/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeyData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyData{}

// KeyData struct for KeyData
type KeyData struct {
	Pubkey string `json:"pubkey"`
	Meta interface{} `json:"meta"`
}

type _KeyData KeyData

// NewKeyData instantiates a new KeyData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyData(pubkey string, meta interface{}) *KeyData {
	this := KeyData{}
	this.Pubkey = pubkey
	this.Meta = meta
	return &this
}

// NewKeyDataWithDefaults instantiates a new KeyData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyDataWithDefaults() *KeyData {
	this := KeyData{}
	return &this
}

// GetPubkey returns the Pubkey field value
func (o *KeyData) GetPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value
// and a boolean to check if the value has been set.
func (o *KeyData) GetPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pubkey, true
}

// SetPubkey sets field value
func (o *KeyData) SetPubkey(v string) {
	o.Pubkey = v
}

// GetMeta returns the Meta field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *KeyData) GetMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyData) GetMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *KeyData) SetMeta(v interface{}) {
	o.Meta = v
}

func (o KeyData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pubkey"] = o.Pubkey
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

func (o *KeyData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pubkey",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyData := _KeyData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyData)

	if err != nil {
		return err
	}

	*o = KeyData(varKeyData)

	return err
}

type NullableKeyData struct {
	value *KeyData
	isSet bool
}

func (v NullableKeyData) Get() *KeyData {
	return v.value
}

func (v *NullableKeyData) Set(val *KeyData) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyData) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyData(val *KeyData) *NullableKeyData {
	return &NullableKeyData{value: val, isSet: true}
}

func (v NullableKeyData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


