/*
Torizon OTA

Testing DevicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/commontorizon/torizon-openapi-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_DevicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevicesAPIService DeleteDevicesDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.DevicesAPI.DeleteDevicesDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesNameDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesNameDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesNetworkDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesNetworkDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesNotesDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesNotesDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesPackages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesPackagesDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesPackagesDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesUptaneDeviceuuidAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesUptaneDeviceuuidAssignment(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevicesUptaneDeviceuuidComponents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevicesUptaneDeviceuuidComponents(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PostDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.PostDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PutDevicesHibernationDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.DevicesAPI.PutDevicesHibernationDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PutDevicesNameDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.DevicesAPI.PutDevicesNameDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PutDevicesNotesDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.DevicesAPI.PutDevicesNotesDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
