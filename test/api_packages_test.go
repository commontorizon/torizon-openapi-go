/*
Torizon OTA

Testing PackagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/commontorizon/torizon-openapi-go"
)

func Test_openapi_PackagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PackagesAPIService DeletePackagesPackageid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		httpRes, err := apiClient.PackagesAPI.DeletePackagesPackageid(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService GetPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PackagesAPI.GetPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService GetPackagesExternal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PackagesAPI.GetPackagesExternal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService GetPackagesExternalInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PackagesAPI.GetPackagesExternalInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService GetPackagesExternalRefreshSourceFileName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceFileName string

		httpRes, err := apiClient.PackagesAPI.GetPackagesExternalRefreshSourceFileName(context.Background(), sourceFileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService PatchPackagesPackageid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.PackagesAPI.PatchPackagesPackageid(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackagesAPIService PostPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PackagesAPI.PostPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
