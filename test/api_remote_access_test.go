/*
Torizon OTA

Testing RemoteAccessAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/commontorizon/torizon-openapi-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_RemoteAccessAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemoteAccessAPIService DeleteRemoteAccessDeviceDeviceuuidSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.RemoteAccessAPI.DeleteRemoteAccessDeviceDeviceuuidSessions(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteAccessAPIService GetRemoteAccessDeviceDeviceuuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.RemoteAccessAPI.GetRemoteAccessDeviceDeviceuuid(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteAccessAPIService GetRemoteAccessDeviceDeviceuuidSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		resp, httpRes, err := apiClient.RemoteAccessAPI.GetRemoteAccessDeviceDeviceuuidSessions(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteAccessAPIService GetRemoteAccessUserPublicKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RemoteAccessAPI.GetRemoteAccessUserPublicKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteAccessAPIService GetRemoteAccessUserSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RemoteAccessAPI.GetRemoteAccessUserSessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteAccessAPIService PostRemoteAccessDeviceDeviceuuidSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceUuid string

		httpRes, err := apiClient.RemoteAccessAPI.PostRemoteAccessDeviceDeviceuuidSessions(context.Background(), deviceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
