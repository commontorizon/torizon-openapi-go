/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRequest{}

// UpdateRequest struct for UpdateRequest
type UpdateRequest struct {
	PackageIds []string `json:"packageIds,omitempty"`
	Custom *map[string]CustomUpdateData `json:"custom,omitempty"`
	Devices []string `json:"devices,omitempty"`
	Fleets []string `json:"fleets,omitempty"`
}

// NewUpdateRequest instantiates a new UpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRequest() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// NewUpdateRequestWithDefaults instantiates a new UpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestWithDefaults() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// GetPackageIds returns the PackageIds field value if set, zero value otherwise.
func (o *UpdateRequest) GetPackageIds() []string {
	if o == nil || IsNil(o.PackageIds) {
		var ret []string
		return ret
	}
	return o.PackageIds
}

// GetPackageIdsOk returns a tuple with the PackageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetPackageIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PackageIds) {
		return nil, false
	}
	return o.PackageIds, true
}

// HasPackageIds returns a boolean if a field has been set.
func (o *UpdateRequest) HasPackageIds() bool {
	if o != nil && !IsNil(o.PackageIds) {
		return true
	}

	return false
}

// SetPackageIds gets a reference to the given []string and assigns it to the PackageIds field.
func (o *UpdateRequest) SetPackageIds(v []string) {
	o.PackageIds = v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *UpdateRequest) GetCustom() map[string]CustomUpdateData {
	if o == nil || IsNil(o.Custom) {
		var ret map[string]CustomUpdateData
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetCustomOk() (*map[string]CustomUpdateData, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *UpdateRequest) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]CustomUpdateData and assigns it to the Custom field.
func (o *UpdateRequest) SetCustom(v map[string]CustomUpdateData) {
	o.Custom = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRequest) GetDevices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRequest) GetDevicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *UpdateRequest) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []string and assigns it to the Devices field.
func (o *UpdateRequest) SetDevices(v []string) {
	o.Devices = v
}

// GetFleets returns the Fleets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRequest) GetFleets() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Fleets
}

// GetFleetsOk returns a tuple with the Fleets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRequest) GetFleetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fleets) {
		return nil, false
	}
	return o.Fleets, true
}

// HasFleets returns a boolean if a field has been set.
func (o *UpdateRequest) HasFleets() bool {
	if o != nil && !IsNil(o.Fleets) {
		return true
	}

	return false
}

// SetFleets gets a reference to the given []string and assigns it to the Fleets field.
func (o *UpdateRequest) SetFleets(v []string) {
	o.Fleets = v
}

func (o UpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageIds) {
		toSerialize["packageIds"] = o.PackageIds
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	if o.Fleets != nil {
		toSerialize["fleets"] = o.Fleets
	}
	return toSerialize, nil
}

type NullableUpdateRequest struct {
	value *UpdateRequest
	isSet bool
}

func (v NullableUpdateRequest) Get() *UpdateRequest {
	return v.value
}

func (v *NullableUpdateRequest) Set(val *UpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequest(val *UpdateRequest) *NullableUpdateRequest {
	return &NullableUpdateRequest{value: val, isSet: true}
}

func (v NullableUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


