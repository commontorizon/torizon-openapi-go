/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeviceSortDirection the model 'DeviceSortDirection'
type DeviceSortDirection string

// List of DeviceSortDirection
const (
	ASC DeviceSortDirection = "Asc"
	DESC DeviceSortDirection = "Desc"
)

// All allowed values of DeviceSortDirection enum
var AllowedDeviceSortDirectionEnumValues = []DeviceSortDirection{
	"Asc",
	"Desc",
}

func (v *DeviceSortDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceSortDirection(value)
	for _, existing := range AllowedDeviceSortDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceSortDirection", value)
}

// NewDeviceSortDirectionFromValue returns a pointer to a valid DeviceSortDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceSortDirectionFromValue(v string) (*DeviceSortDirection, error) {
	ev := DeviceSortDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceSortDirection: valid values are %v", v, AllowedDeviceSortDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceSortDirection) IsValid() bool {
	for _, existing := range AllowedDeviceSortDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceSortDirection value
func (v DeviceSortDirection) Ptr() *DeviceSortDirection {
	return &v
}

type NullableDeviceSortDirection struct {
	value *DeviceSortDirection
	isSet bool
}

func (v NullableDeviceSortDirection) Get() *DeviceSortDirection {
	return v.value
}

func (v *NullableDeviceSortDirection) Set(val *DeviceSortDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSortDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSortDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSortDirection(val *DeviceSortDirection) *NullableDeviceSortDirection {
	return &NullableDeviceSortDirection{value: val, isSet: true}
}

func (v NullableDeviceSortDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSortDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

