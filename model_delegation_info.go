/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DelegationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegationInfo{}

// DelegationInfo struct for DelegationInfo
type DelegationInfo struct {
	LastFetched *time.Time `json:"lastFetched,omitempty"`
	RemoteUri *string `json:"remoteUri,omitempty"`
	FriendlyName *string `json:"friendlyName,omitempty"`
}

// NewDelegationInfo instantiates a new DelegationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegationInfo() *DelegationInfo {
	this := DelegationInfo{}
	return &this
}

// NewDelegationInfoWithDefaults instantiates a new DelegationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationInfoWithDefaults() *DelegationInfo {
	this := DelegationInfo{}
	return &this
}

// GetLastFetched returns the LastFetched field value if set, zero value otherwise.
func (o *DelegationInfo) GetLastFetched() time.Time {
	if o == nil || IsNil(o.LastFetched) {
		var ret time.Time
		return ret
	}
	return *o.LastFetched
}

// GetLastFetchedOk returns a tuple with the LastFetched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetLastFetchedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastFetched) {
		return nil, false
	}
	return o.LastFetched, true
}

// HasLastFetched returns a boolean if a field has been set.
func (o *DelegationInfo) HasLastFetched() bool {
	if o != nil && !IsNil(o.LastFetched) {
		return true
	}

	return false
}

// SetLastFetched gets a reference to the given time.Time and assigns it to the LastFetched field.
func (o *DelegationInfo) SetLastFetched(v time.Time) {
	o.LastFetched = &v
}

// GetRemoteUri returns the RemoteUri field value if set, zero value otherwise.
func (o *DelegationInfo) GetRemoteUri() string {
	if o == nil || IsNil(o.RemoteUri) {
		var ret string
		return ret
	}
	return *o.RemoteUri
}

// GetRemoteUriOk returns a tuple with the RemoteUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetRemoteUriOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteUri) {
		return nil, false
	}
	return o.RemoteUri, true
}

// HasRemoteUri returns a boolean if a field has been set.
func (o *DelegationInfo) HasRemoteUri() bool {
	if o != nil && !IsNil(o.RemoteUri) {
		return true
	}

	return false
}

// SetRemoteUri gets a reference to the given string and assigns it to the RemoteUri field.
func (o *DelegationInfo) SetRemoteUri(v string) {
	o.RemoteUri = &v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *DelegationInfo) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *DelegationInfo) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *DelegationInfo) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

func (o DelegationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastFetched) {
		toSerialize["lastFetched"] = o.LastFetched
	}
	if !IsNil(o.RemoteUri) {
		toSerialize["remoteUri"] = o.RemoteUri
	}
	if !IsNil(o.FriendlyName) {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	return toSerialize, nil
}

type NullableDelegationInfo struct {
	value *DelegationInfo
	isSet bool
}

func (v NullableDelegationInfo) Get() *DelegationInfo {
	return v.value
}

func (v *NullableDelegationInfo) Set(val *DelegationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegationInfo(val *DelegationInfo) *NullableDelegationInfo {
	return &NullableDelegationInfo{value: val, isSet: true}
}

func (v NullableDelegationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


