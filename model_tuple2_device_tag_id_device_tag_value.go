/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tuple2DeviceTagIdDeviceTagValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tuple2DeviceTagIdDeviceTagValue{}

// Tuple2DeviceTagIdDeviceTagValue struct for Tuple2DeviceTagIdDeviceTagValue
type Tuple2DeviceTagIdDeviceTagValue struct {
	Var1 string `json:"_1"`
	Var2 string `json:"_2"`
}

type _Tuple2DeviceTagIdDeviceTagValue Tuple2DeviceTagIdDeviceTagValue

// NewTuple2DeviceTagIdDeviceTagValue instantiates a new Tuple2DeviceTagIdDeviceTagValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTuple2DeviceTagIdDeviceTagValue(var1 string, var2 string) *Tuple2DeviceTagIdDeviceTagValue {
	this := Tuple2DeviceTagIdDeviceTagValue{}
	this.Var1 = var1
	this.Var2 = var2
	return &this
}

// NewTuple2DeviceTagIdDeviceTagValueWithDefaults instantiates a new Tuple2DeviceTagIdDeviceTagValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTuple2DeviceTagIdDeviceTagValueWithDefaults() *Tuple2DeviceTagIdDeviceTagValue {
	this := Tuple2DeviceTagIdDeviceTagValue{}
	return &this
}

// GetVar1 returns the Var1 field value
func (o *Tuple2DeviceTagIdDeviceTagValue) GetVar1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value
// and a boolean to check if the value has been set.
func (o *Tuple2DeviceTagIdDeviceTagValue) GetVar1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var1, true
}

// SetVar1 sets field value
func (o *Tuple2DeviceTagIdDeviceTagValue) SetVar1(v string) {
	o.Var1 = v
}

// GetVar2 returns the Var2 field value
func (o *Tuple2DeviceTagIdDeviceTagValue) GetVar2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Var2
}

// GetVar2Ok returns a tuple with the Var2 field value
// and a boolean to check if the value has been set.
func (o *Tuple2DeviceTagIdDeviceTagValue) GetVar2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var2, true
}

// SetVar2 sets field value
func (o *Tuple2DeviceTagIdDeviceTagValue) SetVar2(v string) {
	o.Var2 = v
}

func (o Tuple2DeviceTagIdDeviceTagValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tuple2DeviceTagIdDeviceTagValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_1"] = o.Var1
	toSerialize["_2"] = o.Var2
	return toSerialize, nil
}

func (o *Tuple2DeviceTagIdDeviceTagValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_1",
		"_2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTuple2DeviceTagIdDeviceTagValue := _Tuple2DeviceTagIdDeviceTagValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTuple2DeviceTagIdDeviceTagValue)

	if err != nil {
		return err
	}

	*o = Tuple2DeviceTagIdDeviceTagValue(varTuple2DeviceTagIdDeviceTagValue)

	return err
}

type NullableTuple2DeviceTagIdDeviceTagValue struct {
	value *Tuple2DeviceTagIdDeviceTagValue
	isSet bool
}

func (v NullableTuple2DeviceTagIdDeviceTagValue) Get() *Tuple2DeviceTagIdDeviceTagValue {
	return v.value
}

func (v *NullableTuple2DeviceTagIdDeviceTagValue) Set(val *Tuple2DeviceTagIdDeviceTagValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTuple2DeviceTagIdDeviceTagValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTuple2DeviceTagIdDeviceTagValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTuple2DeviceTagIdDeviceTagValue(val *Tuple2DeviceTagIdDeviceTagValue) *NullableTuple2DeviceTagIdDeviceTagValue {
	return &NullableTuple2DeviceTagIdDeviceTagValue{value: val, isSet: true}
}

func (v NullableTuple2DeviceTagIdDeviceTagValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTuple2DeviceTagIdDeviceTagValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


