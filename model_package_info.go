/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PackageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageInfo{}

// PackageInfo struct for PackageInfo
type PackageInfo struct {
	PackageName string `json:"packageName"`
	PackageVersion string `json:"packageVersion"`
	Checksum string `json:"checksum"`
}

type _PackageInfo PackageInfo

// NewPackageInfo instantiates a new PackageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageInfo(packageName string, packageVersion string, checksum string) *PackageInfo {
	this := PackageInfo{}
	this.PackageName = packageName
	this.PackageVersion = packageVersion
	this.Checksum = checksum
	return &this
}

// NewPackageInfoWithDefaults instantiates a new PackageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageInfoWithDefaults() *PackageInfo {
	this := PackageInfo{}
	return &this
}

// GetPackageName returns the PackageName field value
func (o *PackageInfo) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *PackageInfo) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *PackageInfo) SetPackageName(v string) {
	o.PackageName = v
}

// GetPackageVersion returns the PackageVersion field value
func (o *PackageInfo) GetPackageVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value
// and a boolean to check if the value has been set.
func (o *PackageInfo) GetPackageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageVersion, true
}

// SetPackageVersion sets field value
func (o *PackageInfo) SetPackageVersion(v string) {
	o.PackageVersion = v
}

// GetChecksum returns the Checksum field value
func (o *PackageInfo) GetChecksum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value
// and a boolean to check if the value has been set.
func (o *PackageInfo) GetChecksumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checksum, true
}

// SetChecksum sets field value
func (o *PackageInfo) SetChecksum(v string) {
	o.Checksum = v
}

func (o PackageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packageName"] = o.PackageName
	toSerialize["packageVersion"] = o.PackageVersion
	toSerialize["checksum"] = o.Checksum
	return toSerialize, nil
}

func (o *PackageInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packageName",
		"packageVersion",
		"checksum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackageInfo := _PackageInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPackageInfo)

	if err != nil {
		return err
	}

	*o = PackageInfo(varPackageInfo)

	return err
}

type NullablePackageInfo struct {
	value *PackageInfo
	isSet bool
}

func (v NullablePackageInfo) Get() *PackageInfo {
	return v.value
}

func (v *NullablePackageInfo) Set(val *PackageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageInfo(val *PackageInfo) *NullablePackageInfo {
	return &NullablePackageInfo{value: val, isSet: true}
}

func (v NullablePackageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


