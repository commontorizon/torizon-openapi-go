/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueueResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueResponse{}

// QueueResponse struct for QueueResponse
type QueueResponse struct {
	CorrelationId string `json:"correlationId"`
	Targets map[string]TargetImage `json:"targets"`
	InFlight bool `json:"inFlight"`
}

type _QueueResponse QueueResponse

// NewQueueResponse instantiates a new QueueResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueResponse(correlationId string, targets map[string]TargetImage, inFlight bool) *QueueResponse {
	this := QueueResponse{}
	this.CorrelationId = correlationId
	this.Targets = targets
	this.InFlight = inFlight
	return &this
}

// NewQueueResponseWithDefaults instantiates a new QueueResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueResponseWithDefaults() *QueueResponse {
	this := QueueResponse{}
	return &this
}

// GetCorrelationId returns the CorrelationId field value
func (o *QueueResponse) GetCorrelationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value
// and a boolean to check if the value has been set.
func (o *QueueResponse) GetCorrelationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationId, true
}

// SetCorrelationId sets field value
func (o *QueueResponse) SetCorrelationId(v string) {
	o.CorrelationId = v
}

// GetTargets returns the Targets field value
func (o *QueueResponse) GetTargets() map[string]TargetImage {
	if o == nil {
		var ret map[string]TargetImage
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *QueueResponse) GetTargetsOk() (*map[string]TargetImage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Targets, true
}

// SetTargets sets field value
func (o *QueueResponse) SetTargets(v map[string]TargetImage) {
	o.Targets = v
}

// GetInFlight returns the InFlight field value
func (o *QueueResponse) GetInFlight() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InFlight
}

// GetInFlightOk returns a tuple with the InFlight field value
// and a boolean to check if the value has been set.
func (o *QueueResponse) GetInFlightOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InFlight, true
}

// SetInFlight sets field value
func (o *QueueResponse) SetInFlight(v bool) {
	o.InFlight = v
}

func (o QueueResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["correlationId"] = o.CorrelationId
	toSerialize["targets"] = o.Targets
	toSerialize["inFlight"] = o.InFlight
	return toSerialize, nil
}

func (o *QueueResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"correlationId",
		"targets",
		"inFlight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueueResponse := _QueueResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueueResponse)

	if err != nil {
		return err
	}

	*o = QueueResponse(varQueueResponse)

	return err
}

type NullableQueueResponse struct {
	value *QueueResponse
	isSet bool
}

func (v NullableQueueResponse) Get() *QueueResponse {
	return v.value
}

func (v *NullableQueueResponse) Set(val *QueueResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueResponse(val *QueueResponse) *NullableQueueResponse {
	return &NullableQueueResponse{value: val, isSet: true}
}

func (v NullableQueueResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


