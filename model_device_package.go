/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DevicePackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicePackage{}

// DevicePackage struct for DevicePackage
type DevicePackage struct {
	Component string `json:"component"`
	Name string `json:"name"`
	Version string `json:"version"`
	Checksum string `json:"checksum"`
}

type _DevicePackage DevicePackage

// NewDevicePackage instantiates a new DevicePackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicePackage(component string, name string, version string, checksum string) *DevicePackage {
	this := DevicePackage{}
	this.Component = component
	this.Name = name
	this.Version = version
	this.Checksum = checksum
	return &this
}

// NewDevicePackageWithDefaults instantiates a new DevicePackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicePackageWithDefaults() *DevicePackage {
	this := DevicePackage{}
	return &this
}

// GetComponent returns the Component field value
func (o *DevicePackage) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *DevicePackage) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *DevicePackage) SetComponent(v string) {
	o.Component = v
}

// GetName returns the Name field value
func (o *DevicePackage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DevicePackage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DevicePackage) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *DevicePackage) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DevicePackage) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DevicePackage) SetVersion(v string) {
	o.Version = v
}

// GetChecksum returns the Checksum field value
func (o *DevicePackage) GetChecksum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value
// and a boolean to check if the value has been set.
func (o *DevicePackage) GetChecksumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checksum, true
}

// SetChecksum sets field value
func (o *DevicePackage) SetChecksum(v string) {
	o.Checksum = v
}

func (o DevicePackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicePackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	toSerialize["checksum"] = o.Checksum
	return toSerialize, nil
}

func (o *DevicePackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component",
		"name",
		"version",
		"checksum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevicePackage := _DevicePackage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevicePackage)

	if err != nil {
		return err
	}

	*o = DevicePackage(varDevicePackage)

	return err
}

type NullableDevicePackage struct {
	value *DevicePackage
	isSet bool
}

func (v NullableDevicePackage) Get() *DevicePackage {
	return v.value
}

func (v *NullableDevicePackage) Set(val *DevicePackage) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePackage) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePackage(val *DevicePackage) *NullableDevicePackage {
	return &NullableDevicePackage{value: val, isSet: true}
}

func (v NullableDevicePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


