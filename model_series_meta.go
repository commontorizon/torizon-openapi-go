/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SeriesMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesMeta{}

// SeriesMeta struct for SeriesMeta
type SeriesMeta struct {
	Aggregation TimeAggregation `json:"aggregation"`
	DeviceIds []string `json:"deviceIds,omitempty"`
}

type _SeriesMeta SeriesMeta

// NewSeriesMeta instantiates a new SeriesMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesMeta(aggregation TimeAggregation) *SeriesMeta {
	this := SeriesMeta{}
	this.Aggregation = aggregation
	return &this
}

// NewSeriesMetaWithDefaults instantiates a new SeriesMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesMetaWithDefaults() *SeriesMeta {
	this := SeriesMeta{}
	return &this
}

// GetAggregation returns the Aggregation field value
func (o *SeriesMeta) GetAggregation() TimeAggregation {
	if o == nil {
		var ret TimeAggregation
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *SeriesMeta) GetAggregationOk() (*TimeAggregation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *SeriesMeta) SetAggregation(v TimeAggregation) {
	o.Aggregation = v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *SeriesMeta) GetDeviceIds() []string {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []string
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesMeta) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *SeriesMeta) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *SeriesMeta) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

func (o SeriesMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregation"] = o.Aggregation
	if !IsNil(o.DeviceIds) {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	return toSerialize, nil
}

func (o *SeriesMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeriesMeta := _SeriesMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeriesMeta)

	if err != nil {
		return err
	}

	*o = SeriesMeta(varSeriesMeta)

	return err
}

type NullableSeriesMeta struct {
	value *SeriesMeta
	isSet bool
}

func (v NullableSeriesMeta) Get() *SeriesMeta {
	return v.value
}

func (v *NullableSeriesMeta) Set(val *SeriesMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesMeta(val *SeriesMeta) *NullableSeriesMeta {
	return &NullableSeriesMeta{value: val, isSet: true}
}

func (v NullableSeriesMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


