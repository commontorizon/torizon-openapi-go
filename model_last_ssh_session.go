/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the LastSshSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LastSshSession{}

// LastSshSession struct for LastSshSession
type LastSshSession struct {
	ConnectedAt time.Time `json:"ConnectedAt"`
	IpAddress string `json:"IpAddress"`
}

type _LastSshSession LastSshSession

// NewLastSshSession instantiates a new LastSshSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLastSshSession(connectedAt time.Time, ipAddress string) *LastSshSession {
	this := LastSshSession{}
	this.ConnectedAt = connectedAt
	this.IpAddress = ipAddress
	return &this
}

// NewLastSshSessionWithDefaults instantiates a new LastSshSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLastSshSessionWithDefaults() *LastSshSession {
	this := LastSshSession{}
	return &this
}

// GetConnectedAt returns the ConnectedAt field value
func (o *LastSshSession) GetConnectedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ConnectedAt
}

// GetConnectedAtOk returns a tuple with the ConnectedAt field value
// and a boolean to check if the value has been set.
func (o *LastSshSession) GetConnectedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectedAt, true
}

// SetConnectedAt sets field value
func (o *LastSshSession) SetConnectedAt(v time.Time) {
	o.ConnectedAt = v
}

// GetIpAddress returns the IpAddress field value
func (o *LastSshSession) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *LastSshSession) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *LastSshSession) SetIpAddress(v string) {
	o.IpAddress = v
}

func (o LastSshSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LastSshSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ConnectedAt"] = o.ConnectedAt
	toSerialize["IpAddress"] = o.IpAddress
	return toSerialize, nil
}

func (o *LastSshSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ConnectedAt",
		"IpAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLastSshSession := _LastSshSession{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLastSshSession)

	if err != nil {
		return err
	}

	*o = LastSshSession(varLastSshSession)

	return err
}

type NullableLastSshSession struct {
	value *LastSshSession
	isSet bool
}

func (v NullableLastSshSession) Get() *LastSshSession {
	return v.value
}

func (v *NullableLastSshSession) Set(val *LastSshSession) {
	v.value = val
	v.isSet = true
}

func (v NullableLastSshSession) IsSet() bool {
	return v.isSet
}

func (v *NullableLastSshSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLastSshSession(val *LastSshSession) *NullableLastSshSession {
	return &NullableLastSshSession{value: val, isSet: true}
}

func (v NullableLastSshSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLastSshSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


