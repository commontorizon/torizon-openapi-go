/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExternalPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalPackage{}

// ExternalPackage struct for ExternalPackage
type ExternalPackage struct {
	Name string `json:"name"`
	DelegationOrigin string `json:"delegationOrigin"`
	Version string `json:"version"`
	PackageId string `json:"packageId"`
	Size int64 `json:"size"`
	Hashes map[string]string `json:"hashes"`
	PkgType *string `json:"pkgType,omitempty"`
	HardwareIds []string `json:"hardwareIds,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Uri *string `json:"uri,omitempty"`
	ProprietaryMeta *string `json:"proprietaryMeta,omitempty"`
}

type _ExternalPackage ExternalPackage

// NewExternalPackage instantiates a new ExternalPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalPackage(name string, delegationOrigin string, version string, packageId string, size int64, hashes map[string]string) *ExternalPackage {
	this := ExternalPackage{}
	this.Name = name
	this.DelegationOrigin = delegationOrigin
	this.Version = version
	this.PackageId = packageId
	this.Size = size
	this.Hashes = hashes
	return &this
}

// NewExternalPackageWithDefaults instantiates a new ExternalPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalPackageWithDefaults() *ExternalPackage {
	this := ExternalPackage{}
	return &this
}

// GetName returns the Name field value
func (o *ExternalPackage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExternalPackage) SetName(v string) {
	o.Name = v
}

// GetDelegationOrigin returns the DelegationOrigin field value
func (o *ExternalPackage) GetDelegationOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelegationOrigin
}

// GetDelegationOriginOk returns a tuple with the DelegationOrigin field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetDelegationOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelegationOrigin, true
}

// SetDelegationOrigin sets field value
func (o *ExternalPackage) SetDelegationOrigin(v string) {
	o.DelegationOrigin = v
}

// GetVersion returns the Version field value
func (o *ExternalPackage) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ExternalPackage) SetVersion(v string) {
	o.Version = v
}

// GetPackageId returns the PackageId field value
func (o *ExternalPackage) GetPackageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageId, true
}

// SetPackageId sets field value
func (o *ExternalPackage) SetPackageId(v string) {
	o.PackageId = v
}

// GetSize returns the Size field value
func (o *ExternalPackage) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ExternalPackage) SetSize(v int64) {
	o.Size = v
}

// GetHashes returns the Hashes field value
func (o *ExternalPackage) GetHashes() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetHashesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hashes, true
}

// SetHashes sets field value
func (o *ExternalPackage) SetHashes(v map[string]string) {
	o.Hashes = v
}

// GetPkgType returns the PkgType field value if set, zero value otherwise.
func (o *ExternalPackage) GetPkgType() string {
	if o == nil || IsNil(o.PkgType) {
		var ret string
		return ret
	}
	return *o.PkgType
}

// GetPkgTypeOk returns a tuple with the PkgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetPkgTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PkgType) {
		return nil, false
	}
	return o.PkgType, true
}

// HasPkgType returns a boolean if a field has been set.
func (o *ExternalPackage) HasPkgType() bool {
	if o != nil && !IsNil(o.PkgType) {
		return true
	}

	return false
}

// SetPkgType gets a reference to the given string and assigns it to the PkgType field.
func (o *ExternalPackage) SetPkgType(v string) {
	o.PkgType = &v
}

// GetHardwareIds returns the HardwareIds field value if set, zero value otherwise.
func (o *ExternalPackage) GetHardwareIds() []string {
	if o == nil || IsNil(o.HardwareIds) {
		var ret []string
		return ret
	}
	return o.HardwareIds
}

// GetHardwareIdsOk returns a tuple with the HardwareIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetHardwareIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HardwareIds) {
		return nil, false
	}
	return o.HardwareIds, true
}

// HasHardwareIds returns a boolean if a field has been set.
func (o *ExternalPackage) HasHardwareIds() bool {
	if o != nil && !IsNil(o.HardwareIds) {
		return true
	}

	return false
}

// SetHardwareIds gets a reference to the given []string and assigns it to the HardwareIds field.
func (o *ExternalPackage) SetHardwareIds(v []string) {
	o.HardwareIds = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ExternalPackage) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ExternalPackage) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ExternalPackage) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ExternalPackage) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ExternalPackage) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ExternalPackage) SetUri(v string) {
	o.Uri = &v
}

// GetProprietaryMeta returns the ProprietaryMeta field value if set, zero value otherwise.
func (o *ExternalPackage) GetProprietaryMeta() string {
	if o == nil || IsNil(o.ProprietaryMeta) {
		var ret string
		return ret
	}
	return *o.ProprietaryMeta
}

// GetProprietaryMetaOk returns a tuple with the ProprietaryMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPackage) GetProprietaryMetaOk() (*string, bool) {
	if o == nil || IsNil(o.ProprietaryMeta) {
		return nil, false
	}
	return o.ProprietaryMeta, true
}

// HasProprietaryMeta returns a boolean if a field has been set.
func (o *ExternalPackage) HasProprietaryMeta() bool {
	if o != nil && !IsNil(o.ProprietaryMeta) {
		return true
	}

	return false
}

// SetProprietaryMeta gets a reference to the given string and assigns it to the ProprietaryMeta field.
func (o *ExternalPackage) SetProprietaryMeta(v string) {
	o.ProprietaryMeta = &v
}

func (o ExternalPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["delegationOrigin"] = o.DelegationOrigin
	toSerialize["version"] = o.Version
	toSerialize["packageId"] = o.PackageId
	toSerialize["size"] = o.Size
	toSerialize["hashes"] = o.Hashes
	if !IsNil(o.PkgType) {
		toSerialize["pkgType"] = o.PkgType
	}
	if !IsNil(o.HardwareIds) {
		toSerialize["hardwareIds"] = o.HardwareIds
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.ProprietaryMeta) {
		toSerialize["proprietaryMeta"] = o.ProprietaryMeta
	}
	return toSerialize, nil
}

func (o *ExternalPackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"delegationOrigin",
		"version",
		"packageId",
		"size",
		"hashes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalPackage := _ExternalPackage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalPackage)

	if err != nil {
		return err
	}

	*o = ExternalPackage(varExternalPackage)

	return err
}

type NullableExternalPackage struct {
	value *ExternalPackage
	isSet bool
}

func (v NullableExternalPackage) Get() *ExternalPackage {
	return v.value
}

func (v *NullableExternalPackage) Set(val *ExternalPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalPackage(val *ExternalPackage) *NullableExternalPackage {
	return &NullableExternalPackage{value: val, isSet: true}
}

func (v NullableExternalPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


