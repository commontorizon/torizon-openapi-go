/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeviceStatus the model 'DeviceStatus'
type DeviceStatus string

// List of DeviceStatus
const (
	NOT_SEEN DeviceStatus = "NotSeen"
	ERROR DeviceStatus = "Error"
	UP_TO_DATE DeviceStatus = "UpToDate"
	UPDATE_PENDING DeviceStatus = "UpdatePending"
	OUTDATED DeviceStatus = "Outdated"
)

// All allowed values of DeviceStatus enum
var AllowedDeviceStatusEnumValues = []DeviceStatus{
	"NotSeen",
	"Error",
	"UpToDate",
	"UpdatePending",
	"Outdated",
}

func (v *DeviceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceStatus(value)
	for _, existing := range AllowedDeviceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceStatus", value)
}

// NewDeviceStatusFromValue returns a pointer to a valid DeviceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceStatusFromValue(v string) (*DeviceStatus, error) {
	ev := DeviceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceStatus: valid values are %v", v, AllowedDeviceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceStatus) IsValid() bool {
	for _, existing := range AllowedDeviceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceStatus value
func (v DeviceStatus) Ptr() *DeviceStatus {
	return &v
}

type NullableDeviceStatus struct {
	value *DeviceStatus
	isSet bool
}

func (v NullableDeviceStatus) Get() *DeviceStatus {
	return v.value
}

func (v *NullableDeviceStatus) Set(val *DeviceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceStatus(val *DeviceStatus) *NullableDeviceStatus {
	return &NullableDeviceStatus{value: val, isSet: true}
}

func (v NullableDeviceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

