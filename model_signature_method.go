/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SignatureMethod the model 'SignatureMethod'
type SignatureMethod string

// List of SignatureMethod
const (
	RSASSA_PSS_SHA256 SignatureMethod = "rsassa-pss-sha256"
	ED25519 SignatureMethod = "ed25519"
	EC_PRIME256V1 SignatureMethod = "ecPrime256v1"
)

// All allowed values of SignatureMethod enum
var AllowedSignatureMethodEnumValues = []SignatureMethod{
	"rsassa-pss-sha256",
	"ed25519",
	"ecPrime256v1",
}

func (v *SignatureMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignatureMethod(value)
	for _, existing := range AllowedSignatureMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignatureMethod", value)
}

// NewSignatureMethodFromValue returns a pointer to a valid SignatureMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignatureMethodFromValue(v string) (*SignatureMethod, error) {
	ev := SignatureMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignatureMethod: valid values are %v", v, AllowedSignatureMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignatureMethod) IsValid() bool {
	for _, existing := range AllowedSignatureMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignatureMethod value
func (v SignatureMethod) Ptr() *SignatureMethod {
	return &v
}

type NullableSignatureMethod struct {
	value *SignatureMethod
	isSet bool
}

func (v NullableSignatureMethod) Get() *SignatureMethod {
	return v.value
}

func (v *NullableSignatureMethod) Set(val *SignatureMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureMethod(val *SignatureMethod) *NullableSignatureMethod {
	return &NullableSignatureMethod{value: val, isSet: true}
}

func (v NullableSignatureMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

