/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SshSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshSession{}

// SshSession struct for SshSession
type SshSession struct {
	AuthorizedPubKeys []string `json:"AuthorizedPubKeys,omitempty"`
	ReversePort int32 `json:"ReversePort"`
	RaServerUrl string `json:"RaServerUrl"`
	RaServerSshPubKey string `json:"RaServerSshPubKey"`
	ExpiresAt time.Time `json:"ExpiresAt"`
}

type _SshSession SshSession

// NewSshSession instantiates a new SshSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshSession(reversePort int32, raServerUrl string, raServerSshPubKey string, expiresAt time.Time) *SshSession {
	this := SshSession{}
	this.ReversePort = reversePort
	this.RaServerUrl = raServerUrl
	this.RaServerSshPubKey = raServerSshPubKey
	this.ExpiresAt = expiresAt
	return &this
}

// NewSshSessionWithDefaults instantiates a new SshSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshSessionWithDefaults() *SshSession {
	this := SshSession{}
	return &this
}

// GetAuthorizedPubKeys returns the AuthorizedPubKeys field value if set, zero value otherwise.
func (o *SshSession) GetAuthorizedPubKeys() []string {
	if o == nil || IsNil(o.AuthorizedPubKeys) {
		var ret []string
		return ret
	}
	return o.AuthorizedPubKeys
}

// GetAuthorizedPubKeysOk returns a tuple with the AuthorizedPubKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshSession) GetAuthorizedPubKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorizedPubKeys) {
		return nil, false
	}
	return o.AuthorizedPubKeys, true
}

// HasAuthorizedPubKeys returns a boolean if a field has been set.
func (o *SshSession) HasAuthorizedPubKeys() bool {
	if o != nil && !IsNil(o.AuthorizedPubKeys) {
		return true
	}

	return false
}

// SetAuthorizedPubKeys gets a reference to the given []string and assigns it to the AuthorizedPubKeys field.
func (o *SshSession) SetAuthorizedPubKeys(v []string) {
	o.AuthorizedPubKeys = v
}

// GetReversePort returns the ReversePort field value
func (o *SshSession) GetReversePort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReversePort
}

// GetReversePortOk returns a tuple with the ReversePort field value
// and a boolean to check if the value has been set.
func (o *SshSession) GetReversePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReversePort, true
}

// SetReversePort sets field value
func (o *SshSession) SetReversePort(v int32) {
	o.ReversePort = v
}

// GetRaServerUrl returns the RaServerUrl field value
func (o *SshSession) GetRaServerUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaServerUrl
}

// GetRaServerUrlOk returns a tuple with the RaServerUrl field value
// and a boolean to check if the value has been set.
func (o *SshSession) GetRaServerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaServerUrl, true
}

// SetRaServerUrl sets field value
func (o *SshSession) SetRaServerUrl(v string) {
	o.RaServerUrl = v
}

// GetRaServerSshPubKey returns the RaServerSshPubKey field value
func (o *SshSession) GetRaServerSshPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaServerSshPubKey
}

// GetRaServerSshPubKeyOk returns a tuple with the RaServerSshPubKey field value
// and a boolean to check if the value has been set.
func (o *SshSession) GetRaServerSshPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaServerSshPubKey, true
}

// SetRaServerSshPubKey sets field value
func (o *SshSession) SetRaServerSshPubKey(v string) {
	o.RaServerSshPubKey = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *SshSession) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *SshSession) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *SshSession) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

func (o SshSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizedPubKeys) {
		toSerialize["AuthorizedPubKeys"] = o.AuthorizedPubKeys
	}
	toSerialize["ReversePort"] = o.ReversePort
	toSerialize["RaServerUrl"] = o.RaServerUrl
	toSerialize["RaServerSshPubKey"] = o.RaServerSshPubKey
	toSerialize["ExpiresAt"] = o.ExpiresAt
	return toSerialize, nil
}

func (o *SshSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ReversePort",
		"RaServerUrl",
		"RaServerSshPubKey",
		"ExpiresAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshSession := _SshSession{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSshSession)

	if err != nil {
		return err
	}

	*o = SshSession(varSshSession)

	return err
}

type NullableSshSession struct {
	value *SshSession
	isSet bool
}

func (v NullableSshSession) Get() *SshSession {
	return v.value
}

func (v *NullableSshSession) Set(val *SshSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSshSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSshSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshSession(val *SshSession) *NullableSshSession {
	return &NullableSshSession{value: val, isSet: true}
}

func (v NullableSshSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


