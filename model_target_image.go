/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TargetImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetImage{}

// TargetImage struct for TargetImage
type TargetImage struct {
	Image Image `json:"image"`
	Uri NullableString `json:"uri,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

type _TargetImage TargetImage

// NewTargetImage instantiates a new TargetImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetImage(image Image, createdAt time.Time) *TargetImage {
	this := TargetImage{}
	this.Image = image
	this.CreatedAt = createdAt
	return &this
}

// NewTargetImageWithDefaults instantiates a new TargetImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetImageWithDefaults() *TargetImage {
	this := TargetImage{}
	return &this
}

// GetImage returns the Image field value
func (o *TargetImage) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *TargetImage) GetImageOk() (*Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *TargetImage) SetImage(v Image) {
	o.Image = v
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TargetImage) GetUri() string {
	if o == nil || IsNil(o.Uri.Get()) {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TargetImage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *TargetImage) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *TargetImage) SetUri(v string) {
	o.Uri.Set(&v)
}
// SetUriNil sets the value for Uri to be an explicit nil
func (o *TargetImage) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *TargetImage) UnsetUri() {
	o.Uri.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *TargetImage) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TargetImage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TargetImage) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o TargetImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *TargetImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetImage := _TargetImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetImage)

	if err != nil {
		return err
	}

	*o = TargetImage(varTargetImage)

	return err
}

type NullableTargetImage struct {
	value *TargetImage
	isSet bool
}

func (v NullableTargetImage) Get() *TargetImage {
	return v.value
}

func (v *NullableTargetImage) Set(val *TargetImage) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetImage) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetImage(val *TargetImage) *NullableTargetImage {
	return &NullableTargetImage{value: val, isSet: true}
}

func (v NullableTargetImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


