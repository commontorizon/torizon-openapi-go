/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Fleet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fleet{}

// Fleet struct for Fleet
type Fleet struct {
	Id string `json:"id"`
	Name string `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	FleetType FleetType `json:"fleetType"`
	Expression *string `json:"expression,omitempty"`
}

type _Fleet Fleet

// NewFleet instantiates a new Fleet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleet(id string, name string, createdAt time.Time, fleetType FleetType) *Fleet {
	this := Fleet{}
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.FleetType = fleetType
	return &this
}

// NewFleetWithDefaults instantiates a new Fleet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetWithDefaults() *Fleet {
	this := Fleet{}
	return &this
}

// GetId returns the Id field value
func (o *Fleet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Fleet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Fleet) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Fleet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Fleet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Fleet) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Fleet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Fleet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Fleet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFleetType returns the FleetType field value
func (o *Fleet) GetFleetType() FleetType {
	if o == nil {
		var ret FleetType
		return ret
	}

	return o.FleetType
}

// GetFleetTypeOk returns a tuple with the FleetType field value
// and a boolean to check if the value has been set.
func (o *Fleet) GetFleetTypeOk() (*FleetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FleetType, true
}

// SetFleetType sets field value
func (o *Fleet) SetFleetType(v FleetType) {
	o.FleetType = v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Fleet) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fleet) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Fleet) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Fleet) SetExpression(v string) {
	o.Expression = &v
}

func (o Fleet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fleet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["fleetType"] = o.FleetType
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

func (o *Fleet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"createdAt",
		"fleetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFleet := _Fleet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFleet)

	if err != nil {
		return err
	}

	*o = Fleet(varFleet)

	return err
}

type NullableFleet struct {
	value *Fleet
	isSet bool
}

func (v NullableFleet) Get() *Fleet {
	return v.value
}

func (v *NullableFleet) Set(val *Fleet) {
	v.value = val
	v.isSet = true
}

func (v NullableFleet) IsSet() bool {
	return v.isSet
}

func (v *NullableFleet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleet(val *Fleet) *NullableFleet {
	return &NullableFleet{value: val, isSet: true}
}

func (v NullableFleet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


