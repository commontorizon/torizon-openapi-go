/*
Torizon OTA

 This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

API version: 2.0-Beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInfo{}

// NetworkInfo struct for NetworkInfo
type NetworkInfo struct {
	DeviceUuid string `json:"deviceUuid"`
	LocalIpV4 NullableString `json:"localIpV4,omitempty"`
	Hostname NullableString `json:"hostname,omitempty"`
	MacAddress NullableString `json:"macAddress,omitempty"`
}

type _NetworkInfo NetworkInfo

// NewNetworkInfo instantiates a new NetworkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInfo(deviceUuid string) *NetworkInfo {
	this := NetworkInfo{}
	this.DeviceUuid = deviceUuid
	return &this
}

// NewNetworkInfoWithDefaults instantiates a new NetworkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInfoWithDefaults() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// GetDeviceUuid returns the DeviceUuid field value
func (o *NetworkInfo) GetDeviceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetDeviceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUuid, true
}

// SetDeviceUuid sets field value
func (o *NetworkInfo) SetDeviceUuid(v string) {
	o.DeviceUuid = v
}

// GetLocalIpV4 returns the LocalIpV4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInfo) GetLocalIpV4() string {
	if o == nil || IsNil(o.LocalIpV4.Get()) {
		var ret string
		return ret
	}
	return *o.LocalIpV4.Get()
}

// GetLocalIpV4Ok returns a tuple with the LocalIpV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInfo) GetLocalIpV4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalIpV4.Get(), o.LocalIpV4.IsSet()
}

// HasLocalIpV4 returns a boolean if a field has been set.
func (o *NetworkInfo) HasLocalIpV4() bool {
	if o != nil && o.LocalIpV4.IsSet() {
		return true
	}

	return false
}

// SetLocalIpV4 gets a reference to the given NullableString and assigns it to the LocalIpV4 field.
func (o *NetworkInfo) SetLocalIpV4(v string) {
	o.LocalIpV4.Set(&v)
}
// SetLocalIpV4Nil sets the value for LocalIpV4 to be an explicit nil
func (o *NetworkInfo) SetLocalIpV4Nil() {
	o.LocalIpV4.Set(nil)
}

// UnsetLocalIpV4 ensures that no value is present for LocalIpV4, not even an explicit nil
func (o *NetworkInfo) UnsetLocalIpV4() {
	o.LocalIpV4.Unset()
}

// GetHostname returns the Hostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInfo) GetHostname() string {
	if o == nil || IsNil(o.Hostname.Get()) {
		var ret string
		return ret
	}
	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInfo) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// HasHostname returns a boolean if a field has been set.
func (o *NetworkInfo) HasHostname() bool {
	if o != nil && o.Hostname.IsSet() {
		return true
	}

	return false
}

// SetHostname gets a reference to the given NullableString and assigns it to the Hostname field.
func (o *NetworkInfo) SetHostname(v string) {
	o.Hostname.Set(&v)
}
// SetHostnameNil sets the value for Hostname to be an explicit nil
func (o *NetworkInfo) SetHostnameNil() {
	o.Hostname.Set(nil)
}

// UnsetHostname ensures that no value is present for Hostname, not even an explicit nil
func (o *NetworkInfo) UnsetHostname() {
	o.Hostname.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInfo) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress.Get()) {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInfo) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkInfo) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *NetworkInfo) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}
// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *NetworkInfo) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *NetworkInfo) UnsetMacAddress() {
	o.MacAddress.Unset()
}

func (o NetworkInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceUuid"] = o.DeviceUuid
	if o.LocalIpV4.IsSet() {
		toSerialize["localIpV4"] = o.LocalIpV4.Get()
	}
	if o.Hostname.IsSet() {
		toSerialize["hostname"] = o.Hostname.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["macAddress"] = o.MacAddress.Get()
	}
	return toSerialize, nil
}

func (o *NetworkInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkInfo := _NetworkInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkInfo)

	if err != nil {
		return err
	}

	*o = NetworkInfo(varNetworkInfo)

	return err
}

type NullableNetworkInfo struct {
	value *NetworkInfo
	isSet bool
}

func (v NullableNetworkInfo) Get() *NetworkInfo {
	return v.value
}

func (v *NullableNetworkInfo) Set(val *NetworkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInfo(val *NetworkInfo) *NullableNetworkInfo {
	return &NullableNetworkInfo{value: val, isSet: true}
}

func (v NullableNetworkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


